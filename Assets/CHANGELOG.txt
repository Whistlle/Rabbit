*************Visual Novel 开发日志*********************
2015.2.27
DONE:
·剧本语言(类KrKr)解释器的实现(大致)
·几个重要的Tag的实现:Settext,Print
·脚本系统(ScriptEngine)框架的实现

TODO:
·剩余Tag的实现
·连接Live2D系统
·尝试如何将Live2D当做插件扩展在VisualNovel中
·一堆BUG的修复与优化

********************************************************

*******************CHANGELOG****************************
2015.5.27

进度：
·大致将原先写的c++版本移植了过来并实现了其原有的功能

DONE:
·参考VN Toolkits，重构了ScriptEngine的循环系统，由原来的通过消息系统控制
剧本传递指令进度(EVENT_SCRIPT_COMMAND_FINISH与EVENT_SCRIPT_CONTINUE)
修改为通过协程进行循环，执行速度固定为一帧。
·修复使用[jump]Tag后会死循环的BUG

TODO：(近期)
·场景控制的几个Tag的实现：EnterScene 等
·选择肢的实现
*********************************************************

********************实现细节讨论*************************
2015.2.28
	
目前对ScriptEngine的指令派发机制有两种方案：
1.完全使用EventDispatcher.
	接受该消息的UI或模型订阅该消息，然后在ScriptEngine执行到
该指令后通过DispatchMessage()发送该消息及附件

2.使用Unity自带的消息传递机制.
	在ScriptEngine的GameObject上挂上相应的事件处理脚本：
(如SceneEvent, SystemUIEvent, MessageEvent等)。ScriptEngine执行到
该指令后通过SendMessage()将方法名发送到该GameObject挂着的各事件处理脚本上
已完成指令的执行

第一种方法取自cocos2dx的消息传送机制。要正确传递一个消息需要保证：
1.该消息已经注册到EventDispatcher中
2.发送信息的时候需要保证消息名正确：string

在EventDispatcher的实现中默认一个消息有多个订阅者，且订阅者间有一定的顺序
或优先级(虽然该排序并未实现).而纵观ScriptEngine，往往一个消息的订阅者只有
一个(一般来说，不排除某一段玩法将一段文字[settext]同时在两个文本框中打印出)
，如enterscene不太可能同时广播到屏幕中的两个场景上，[print text]所指向的主
TextBox一般来说也只有一个。所以使用EventDispatcher有些大材小用。
不过也因为使用的该机制能使ScriptEngine派发指令与实现完全解耦：在引擎处我只要
知道当前派发该指令并把数据全部塞进Message发送出去就好了。我完全不比知道具体
这些指令是通过什么方法实现的。缺点的话就是要在指令实现处些一长串的注册事件，
略为繁琐。还有一些不安的地方不过暂时并没有想到是什么问题-v-

对于第二种方案，该方案是Visual Novel Tookits所采用的。不需要向EventDispatcher注册
.当然不需要注册的原因是在GameObject上挂上内各种事件处理脚本。这样的好处是
可以在一个GameObject面板上统一设置个各种Event配置参数，在一定程度上方面调试。
然而也导致了轻微的耦合(好像又不耦合，因为广播是对整个GameObject来说的引擎并不需要
持有脚本的引用- -)，被迫的把每个模块的。啊对Unity自带的消息处理机制还是不够熟悉啊。

目前采用第一种方案，因为一开始从c++那里搬过来的时候用的就是这个。究竟到最后有没有坑还得拭目以待。
